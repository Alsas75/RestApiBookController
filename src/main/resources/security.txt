Аутентификация (Authentication) установление личности пользователя

Авторизация (Authorization) предоставление или ограничение доступа к ресурсам

Конфиденциальность (Confidentiality) только уполномоченные пользователи могут просматривать данные

Целостность (Integrity) данные пользователя не могут быть изменены без разрешения

Доступность (Availability) система работает и доступна в нужный момент

Аудит и отслеживаемость Auditability & Traceability  кто ято делал, когда и почему

Архитектура

SecurityFilterChain цепочка фильтров, обрабатывающих запросы
AuthenticationManager отвечает за проверку данных пользователя
AuthenticationProvider механизмЮ который фактически проводит проверку
UserDetailService компонент который загружает пользователя по имени пользователя
PasswordEncoder компонент, для кодировки паролей (Bcrypt)
SecurityContentHolder глобальное хранилище, где лежит текущий пользователь запроса

HTTP Request --> SecurityFilterChain --> UsernamePasswordAuthFilter --> AuthenticationManager -->
 --> AuthenticationProvider --> UserDetailService --> SecurityContentHolder

 InMemory аутентификация храним пользователей и их пароли в оперативной памяти приложения

JDBC Аутентификация используем SQL запросы без использования Spring Data или JPA или сущностей

JPA + Custom UserDetailService подключаем полноценную объектную модель пользователей с гибким управлением доступа

JWT Аутентификация использование специального токена для проверки пользователя

JWT Json Web Token способ передачи информации между клиентом и сервером без сохранения сессии
Токен состоит:
    Header алгоритм подписи HS512
    Payload полезные данные, например имя пользователя
    Signature подпись токена, созданная с использованием секрета сервера